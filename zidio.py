# -*- coding: utf-8 -*-
"""zidio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ESIV0HXjvudkKrnj1eaDGK14fDtWKz6x
"""

# import the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
from yellowbrick.cluster import KElbowVisualizer

data=pd.read_excel("/content/ecom customer_data.xlsx")
data

data.head()

df=data.copy()
df.info()

df.describe()

df.describe()

df[df.duplicated()]

df.isna().sum()

df['Gender']=df['Gender'].fillna(df['Gender'].mode()[0])

df.isna().sum().sum()

df.Gender.value_counts()

sns.countplot(x='Gender',data=df)
plt.show()

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
sns.countplot(data=df,x='Orders')
plt.show()

plt.subplot(1,2,2)
sns.countplot(data=df,x='Orders',hue='Gender')
plt.suptitle('Overall Orders vs Gender wise Age')
plt.show()

col=list(df.columns[2:])
def dist_plot(lst):
    plt.figure(figsize=(30,30))
    for i, col in enumerate(lst, 1):
        plt.subplot(6, 6, i)
        # Use histplot instead of distplot
        sns.boxplot(data=df,x=df[col])
    plt.show()
# Make sure this line is indented at the same level as the `def dist_plot(lst):` line
dist_plot(col)

plt.figure(figsize=(20,15))
sns.heatmap(df.iloc[:,3:].corr())
plt.show()

df.iloc[:2,:].hist(figsize=(40,30))
plt.show()

new_df=df.copy()
new_df['Total Search']=new_df.iloc[:,3:].sum(axis=1)

new_df.sort_values('Total Search', ascending=False)

plt.figure(figsize=(13,8))
plt_data=new_df.sort_values('Total Search', ascending=False)[['Cust_ID','Gender','Total Search']].head(10)
sns.barplot(data=plt_data,x='Cust_ID',y='Total Search',hue='Gender',order=plt_data.sort_values('Total Search', ascending=False).Cust_ID)
plt.title('Top 10 Cust_ID based on Total Searches')

plt.show()

x=df.iloc[:,2:].values
x

from sklearn.preprocessing import MinMaxScaler # Import the MinMaxScaler class

x=df.iloc[:,2:].values

scale = MinMaxScaler() # Assign an instance of MinMaxScaler to the variable 'scale'
features = scale.fit_transform(x)
features

inertia = []
for i in range(1, 16):
    k_means=KMeans(n_clusters=i)
    k_means=k_means.fit(features)
    inertia.append(k_means.inertia_)

plt.figure(figsize=(20, 7))
plt.subplot(1,2,1)
plt.plot(range(1,16), inertia, 'bo-')
plt.xlabel('No og clusters'),plt.ylabel('Inertia')

plt.subplot(1,2,2)
kmeans=KMeans()
visualise=KElbowVisualizer(kmeans,k=(1,16))
visualise.fit(features)
plt.suptitle("Elbow Graph & Elbow Visualiser")
visualise.poof()
plt.show()

!pip install scikit-learn
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score # Import the silhouette_score function

silhouette_avg=[]
for i in range(2,16):
    kmeans=KMeans(n_clusters=i)
    cluster_labels=kmeans.fit_predict(features)
    silhouette_avg.append(silhouette_score(features,cluster_labels))

plt.figure(figsize=(10,7))
plt.plot(range(2,16),silhouette_avg,'bX-')
plt.xlabel('Values of K'),plt.ylabel('Silhouette Score')
plt.title('Silhouette Analysis for Optimal')
plt.show

model=KMeans(n_clusters=3)
model=model.fit(features)

y_km=model.predict(features)
centers=model.cluster_centers_

df["Cluster"]=pd.DataFrame(y_km)
df.to_csv("Cluster_data",index=False)

df["Cluster"].value_counts()

sns.countplot(data=df,x='Cluster')
plt.show()

c_df=pd.read_csv("Cluster_data")
c_df.head()

c_df['Total Search']=c_df.iloc[:,3:38].sum(axis=1)
c_df.head()

cl_0=c_df.groupby(['Cluster','Gender'], as_index=False).sum().query("Cluster==0") # Use 'Cluster' (capital C) to match the column name
cl_0

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
sns.countplot(data=c_df.query("Cluster==0"), x="Gender")
plt.title("Customer Count")

plt.subplot(1,2,2)
sns.barplot(data=cl_0, x="Gender", y="Total Search")
plt.title("Total Searches by Gender")
plt.suptitle("No. of customer and their total services in 'Cluster 0'")
plt.show()

cl_1=c_df.groupby(['Cluster','Gender'], as_index=False).sum().query("Cluster==1")
cl_1

plt.figure(figsize=(15,6))
plt.subplot (1,2,1)
sns.countplot (data=c_df.query("Cluster==1"), x="Gender")
plt.title("Customers Count")

plt.subplot(1,2,2)
sns.barplot(data=cl_1, x="Gender", y="Total Search")
plt.title("Total Searches by Gender")
plt.suptitle("No. of customer and their total services in 'Cluster 1'")
plt.show()

cl_2=c_df.groupby(['Cluster','Gender'], as_index=False).sum().query("Cluster==2")
cl_2

plt.figure(figsize=(15,6))
plt.subplot(1,2,1)
sns.countplot(data=c_df.query("Cluster==2"), x="Gender")
plt.title("Customers Count")

plt.subplot (1,2,2)
sns.barplot(data=cl_2, x="Gender", y="Total Search")
plt.title("Total Searches by Gender")
plt.suptitle("No. of customer and their total services in 'Cluster 2'")
plt.show()

final_df=c_df.groupby(["Cluster"], as_index=False).sum()
final_df

plt.figure(figsize=(15,6))
sns.countplot(data=c_df, x="Cluster",hue="Gender")
plt.title("Total customers on each cluster")
plt.show()

plt.figure(figsize=(15,6))
plt.subplot(1,2,1)
sns.barplot(data=final_df,x="Cluster" ,y="Total Search")
plt.title("Total Searches by each group")

plt.subplot (1,2,2)
sns.barplot(data=final_df,x="Cluster",y="Orders")
plt.title("Past Orders by each group")
plt.suptitle("No. of times customer searched the product and their past orders")
plt.show()

